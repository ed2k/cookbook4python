/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Floater Bridge Network.
 *
 * The Initial Developer of the Original Code is
 * Geoff Pike <pike@EECS.Berkeley.EDU>.
 * Portions created by the Initial Developer are Copyright (C) 1996-2003
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the
 * terms of either the GNU General Public License Version 2 or later
 * (the "GPL"), in which case the provisions of the GPL are applicable
 * instead of those above. If you wish to allow use of your version of
 * this file only under the terms of the GPL, and not to allow others
 * to use your version of this file under the terms of the MPL,
 * indicate your decision by deleting the provisions above and replace
 * them with the notice and other provisions required by the GPL. If
 * you do not delete the provisions above, a recipient may use your
 * version of this file under the terms of either the MPL or the GPL.
 * ***** END LICENSE BLOCK ***** */



/* matrixsize.tcp - set matrix size parameters */

proc smallmatrix {c b v {m 160}} {
    global handx handy canv namex namey suitgap ourcardgap theircardgap vgap \
	    pardheight matrixheight matrixwidth lhowidth rhowidth \
	    self_matrix_gap bottom_cutoff rhomaxx



    gset pardheight 100
    gset matrixwidth 200 
    gset lhowidth 193
    gset rhowidth $lhowidth
    gset self_matrix_gap 55
    gset suitgap 45
    gset ourcardgap 23
    gset theircardgap 19
    gset rhomaxx($c) 600
    gset cardrectvgap 4


    set bottom_cutoff $b
    set vgap $v
    set matrixheight $m
    set matrixtop $pardheight
    set matrixl $lhowidth
    set matrixbot [expr $pardheight + $matrixheight]
    set matrixr [expr $lhowidth + $matrixwidth]
    set canv($c,matrix) "$matrixl $matrixtop $matrixr $matrixbot"

    set handx($c,self) [expr $matrixl + $matrixwidth / 2]
    set handx($c,pard) $handx($c,self)
    set handy($c,pard) [expr $matrixtop - 50]
    set handy($c,self) [expr $matrixbot + $self_matrix_gap]
    set handx($c,lho) 50
    set handy($c,lho) [expr $pardheight + 40]
    set handx($c,rho) [expr $matrixr + 40]
    set handy($c,rho) $handy($c,lho)
    
    set canv($c,height) [expr $handy($c,self) + 35 - $bottom_cutoff]
    set canv($c,width) [expr $lhowidth + $matrixwidth + $rhowidth]

    foreach p {lho self pard rho} {
	set namex($p) $handx($c,$p)
	set namey($p) [expr $handy($c,$p) - 43]
    }
}

proc tinymatrix {c} {smallmatrix $c 32 26 148}


proc bigmatrix {c} {
    global handx handy canv namex namey suitgap ourcardgap theircardgap vgap \
	    pardheight matrixheight matrixwidth lhowidth rhowidth \
	    self_matrix_gap bottom_cutoff rhomaxx


    gset handx($c,self) 320
    gset handy($c,self) 370
    gset handx($c,pard) $handx($c,self)
    gset handy($c,pard) 50
    gset handx($c,lho) 50
    gset handy($c,lho) 150
    gset handx($c,rho) 490
    gset handy($c,rho) $handy($c,lho)
    gset rhomaxx($c) 650
    
    gset canv($c,matrix) "200 100 440 300"
    
    gset canv($c,height) 415
    gset canv($c,width) 660
    
    foreach p {lho self pard rho} {
	gset namex($p) $handx($c,$p)
	gset namey($p) [expr $handy($c,$p) - 43]
    }
    
    gset suitgap 50
    gset ourcardgap 25
    gset theircardgap 20
    gset vgap 38
    
    gset cardrectvgap 5
}




/** test routines for experimenting with different sizes;
    these are not normally used **/

proc mdealtest {{n -1}} {
    set q(0) {AKQ AKQ AKQ AKQJ JT9 JT9 JT9 T987 876 876 876 6543 5432 5432 5432 2}
    set q(1) {AKQJT9 AKQJT98 AKQJT987 AKQJT9876 {} {} {} {} {} {} {} {} {} {} {} {}}
    set q(2) {{} {} {} {} AKQJT9 AKQJT98 AKQJT987 AKQJT9876 {} {} {} {} {} {} {} {}}
    set q(3) {{} {} {} {} {} {} {} {} AKQJT9 AKQJT98 AKQJT987 AKQJT9876 {} {} {} {}}
    set q(4) {{} {} {} {} {} {} {} {} {} {} {} {} AKQJT9 AKQJT98 AKQJT987 AKQJT9876}
    set q(5) {AKQJT987654 Q82 J J6 {} {} {} {} {} {} {} {} {} {} {} {}}
    set q(6) {{} {} {} {} AKQJT987654 Q82 J J6 {} {} {} {} {} {} {} {}}
    set q(7) {{} {} {} {} {} {} {} {} AKQJT987654 Q82 J J6 {} {} {} {}}
    set q(8) {{} {} {} {} {} {} {} {} {} {} {} {} AKQJT987654 Q82 J J6}
    if {$n >= 0} {catch {eval "fulldeal $q($n)"}} {
	for {set i 1} {$i <= 8} {incr i} {
	    after [expr $i * 5000] fulldeal $q($i)
	}
    }
}


proc mt {{n 0}} {
    mdealtest $n
 
    showplay self c q
    showplay pard s k
    showplay lho d a
    showplay rho h j
    sillynames
}

proc mtest {{d {}}} {
    catch {destroy .tc}
    toplevel .tc
    canvsetup [canvas .tc.c]
    pack .tc.c -side top -expand yes -fill both
    fulldeal AKQ AKQ AKQ AKQJ JT9 JT9 JT9 T987 876 876 876 6543 5432 5432 5432 2
    eval "mdealtest $d"

    showplay self c q
    showplay pard s k
    showplay lho d a
    showplay rho h j
    sillynames
}


