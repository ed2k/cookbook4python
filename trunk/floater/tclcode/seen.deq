/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the KWOTELicenseKWOTE); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an KWOTEAS ISKWOTE basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Floater Bridge Network.
 *
 * The Initial Developer of the Original Code is
 * Geoff Pike <pike@EECS.Berkeley.EDU>.
 * Portions created by the Initial Developer are Copyright (C) 1996-2003
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the
 * terms of either the GNU General Public License Version 2 or later
 * (the KWOTEGPLKWOTE), in which case the provisions of the GPL are applicable
 * instead of those above. If you wish to allow use of your version of
 * this file only under the terms of the GPL, and not to allow others
 * to use your version of this file under the terms of the MPL,
 * indicate your decision by deleting the provisions above and replace
 * them with the notice and other provisions required by the GPL. If
 * you do not delete the provisions above, a recipient may use your
 * version of this file under the terms of either the MPL or the GPL.
 * ***** END LICENSE BLOCK ***** */
proc query_have_seen {name set} {
    set x KWOTE$name $setKWOTE
    global $x
    array names $x
}

/* a_h_s is short for assert_have_seen */
proc a_h_s {name set num} {
    global KWOTEhave_seen_sets_$nameKWOTE
    eval KWOTEset \KWOTEhave_seen_sets_$name\($set)\KWOTE 1KWOTE

    set x KWOTE$name $setKWOTE
    global $x
    eval KWOTEset \{$x\($num)\} 1KWOTE
}

proc have_seen_sets {name} {
    global KWOTEhave_seen_sets_$nameKWOTE
    array names KWOTEhave_seen_sets_$nameKWOTE
}

proc discard_data_except_from {date} {
    global nameset

    foreach name $nameset {
QTABQ global KWOTEhave_seen_sets_$nameKWOTE
QTABQ foreach set [have_seen_sets $name] {
QTABQ     if ![string match *$date* $set] {
QTABQ QTABQ set x KWOTE$name $setKWOTE
QTABQ QTABQ global $x
QTABQ QTABQ unset $x
//QTABQ QTABQ puts KWOTEremoved \KWOTE$x\KWOTEKWOTE
QTABQ QTABQ eval KWOTEunset \KWOTEhave_seen_sets_$name\($set)\KWOTEKWOTE
//QTABQ QTABQ puts KWOTEremoved have_seen_sets_$name\($set)KWOTE
QTABQ     }
QTABQ }
    }
}

/////////////////////////////////////////////////////////////////////////////

set to_be_sent_n 0

proc want_to_send {name set num} {
    global to_be_sent_n to_be_sent

//  talkmsg KWOTEwant_to_send $name $set $numKWOTE
    set to_be_sent([incr to_be_sent_n]) $name
    set to_be_sent([incr to_be_sent_n]) $set
    set to_be_sent([incr to_be_sent_n]) $num
}

// Append everything to be sent together, separating fields with tab.
// This is probably an O(n^2) algorithm.  Could be done in O(n).
proc what_to_send {} {
    global to_be_sent_n to_be_sent

    if {$to_be_sent_n == 0} {return KWOTEKWOTE}
    set s $to_be_sent(1)
    for {set i 2} {$i <= $to_be_sent_n} {incr i} {
QTABQ set s KWOTE$sQTABQ $to_be_sent($i)KWOTE
QTABQ unset to_be_sent($i)
    }
    set to_be_sent_n 0
    return $s
}
